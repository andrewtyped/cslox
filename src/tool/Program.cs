using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace tool
{
    class Program
    {
        static int Main(string[] args)
        {
            if(args.Length != 1)
            {
                Console.Error.WriteLine("Usage: tool.exe <output directory>");
                return 1;
            }

            var outputDir = args[0];

            DefineAst(outputDir,
                      "Expr",
                      new List<string>
                      {
                          "Binary   : Expr left, Token op, Expr right",
                          "Grouping : Expr expression",
                          "Literal  : Object value",
                          "Unary    : Token op, Expr right"
                      });

            return 0;
        }

        private static void DefineAst(string outputDir, string baseName, List<string> types)
        {
            string path = Path.Combine(outputDir,
                                       $"{baseName}.cs");

            using var streamWriter = new StreamWriter(path,
                                                      append: false,
                                                      Encoding.UTF8);

            string indent = "";
            void WriteLine(string line) => streamWriter.WriteLine(indent + line);
            void PushIndent() => indent += "    ";

            void PopIndent() =>
                indent = indent.Remove(0,
                                       4);
            void NewLine() => streamWriter.WriteLine();

            WriteLine("/*");
            WriteLine("** This file is generated by the 'tool' project. Do not modify by hand.");
            WriteLine("*/");
            NewLine();
            WriteLine("using System;");
            WriteLine("using System.Collections.Generic;");
            NewLine();
            WriteLine("namespace lox");
            WriteLine("{");
            PushIndent();
            WriteLine($"public abstract class {baseName}");
            WriteLine("{");
            PushIndent();

            foreach(string type in types)
            {
                string className = type.Split(":")[0]
                                       .Trim();
                string fields = type.Split(":")[1]
                                    .Trim();

                WriteLine($"public class {className} : {baseName}");
                WriteLine("{");
                PushIndent();

                //Constructor
                WriteLine($"public {className}( {fields} )");
                WriteLine("{");
                PushIndent();

                var fieldList = fields.Split(", ");
                foreach(var field in fieldList)
                {
                    string name = field.Split(" ")[1];
                    WriteLine($"this.{name} = {name};");
                }

                PopIndent();
                WriteLine("}");
                //End constructor

                NewLine();

                //Fields
                foreach(var field in fieldList)
                {
                    string name = field.Split(" ")[1];
                    WriteLine($"public readonly {field};");
                    NewLine();
                }
                //End Fields

                PopIndent();
                WriteLine("}");
                NewLine();
                NewLine();
            }

            PopIndent();
            WriteLine("}");
            PopIndent();
            WriteLine("}");

        }
    }
}
