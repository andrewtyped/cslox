/*
** This file is generated by the 'tool' project. Do not modify by hand.
*/

using System;
using System.Collections.Generic;

namespace lox
{
    public abstract class Stmt
    {
        public interface IVisitor<R>
        {
            R VisitBlockStmt(Block stmt, in ReadOnlySpan<char> source);
            R VisitExpressionStmt(Expression stmt, in ReadOnlySpan<char> source);
            R VisitFunctionStmt(Function stmt, in ReadOnlySpan<char> source);
            R VisitIfStmt(If stmt, in ReadOnlySpan<char> source);
            R VisitPrintStmt(Print stmt, in ReadOnlySpan<char> source);
            R VisitReturnStmt(Return stmt, in ReadOnlySpan<char> source);
            R VisitVarStmt(Var stmt, in ReadOnlySpan<char> source);
            R VisitWhileStmt(While stmt, in ReadOnlySpan<char> source);
        }

        public class Block : Stmt
        {
            public Block( List<Stmt> statements )
            {
                this.statements = statements;
            }

            public readonly List<Stmt> statements;

            public override R Accept<R>(IVisitor<R> visitor, in ReadOnlySpan<char> source)
            {
                return visitor.VisitBlockStmt(this, source);
            }
        }


        public class Expression : Stmt
        {
            public Expression( Expr expression )
            {
                this.expression = expression;
            }

            public readonly Expr expression;

            public override R Accept<R>(IVisitor<R> visitor, in ReadOnlySpan<char> source)
            {
                return visitor.VisitExpressionStmt(this, source);
            }
        }


        public class Function : Stmt
        {
            public Function( Token name, List<Token> parameters, List<Stmt> body )
            {
                this.name = name;
                this.parameters = parameters;
                this.body = body;
            }

            public readonly Token name;

            public readonly List<Token> parameters;

            public readonly List<Stmt> body;

            public override R Accept<R>(IVisitor<R> visitor, in ReadOnlySpan<char> source)
            {
                return visitor.VisitFunctionStmt(this, source);
            }
        }


        public class If : Stmt
        {
            public If( Expr condition, Stmt thenBranch, Stmt? elseBranch )
            {
                this.condition = condition;
                this.thenBranch = thenBranch;
                this.elseBranch = elseBranch;
            }

            public readonly Expr condition;

            public readonly Stmt thenBranch;

            public readonly Stmt? elseBranch;

            public override R Accept<R>(IVisitor<R> visitor, in ReadOnlySpan<char> source)
            {
                return visitor.VisitIfStmt(this, source);
            }
        }


        public class Print : Stmt
        {
            public Print( Expr expression )
            {
                this.expression = expression;
            }

            public readonly Expr expression;

            public override R Accept<R>(IVisitor<R> visitor, in ReadOnlySpan<char> source)
            {
                return visitor.VisitPrintStmt(this, source);
            }
        }


        public class Return : Stmt
        {
            public Return( Token keyword, Expr? value )
            {
                this.keyword = keyword;
                this.value = value;
            }

            public readonly Token keyword;

            public readonly Expr? value;

            public override R Accept<R>(IVisitor<R> visitor, in ReadOnlySpan<char> source)
            {
                return visitor.VisitReturnStmt(this, source);
            }
        }


        public class Var : Stmt
        {
            public Var( Token name, Expr? initializer )
            {
                this.name = name;
                this.initializer = initializer;
            }

            public readonly Token name;

            public readonly Expr? initializer;

            public override R Accept<R>(IVisitor<R> visitor, in ReadOnlySpan<char> source)
            {
                return visitor.VisitVarStmt(this, source);
            }
        }


        public class While : Stmt
        {
            public While( Expr condition, Stmt statement )
            {
                this.condition = condition;
                this.statement = statement;
            }

            public readonly Expr condition;

            public readonly Stmt statement;

            public override R Accept<R>(IVisitor<R> visitor, in ReadOnlySpan<char> source)
            {
                return visitor.VisitWhileStmt(this, source);
            }
        }


        public abstract R Accept<R>(IVisitor<R> visitor, in ReadOnlySpan<char> source);
    }
}
