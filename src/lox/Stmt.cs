/*
** This file is generated by the 'tool' project. Do not modify by hand.
*/

using System;
using System.Collections.Generic;

namespace lox
{
    public abstract class Stmt
    {
        public interface IVisitor<R>
        {
            R VisitBlockStmt(Block stmt, in ReadOnlySpan<char> source);
            R VisitExpressionStmt(Expression stmt, in ReadOnlySpan<char> source);
            R VisitPrintStmt(Print stmt, in ReadOnlySpan<char> source);
            R VisitVarStmt(Var stmt, in ReadOnlySpan<char> source);
        }

        public class Block : Stmt
        {
            public Block( List<Stmt> statements )
            {
                this.statements = statements;
            }

            public readonly List<Stmt> statements;

            public override R Accept<R>(IVisitor<R> visitor, in ReadOnlySpan<char> source)
            {
                return visitor.VisitBlockStmt(this, source);
            }
        }


        public class Expression : Stmt
        {
            public Expression( Expr expression )
            {
                this.expression = expression;
            }

            public readonly Expr expression;

            public override R Accept<R>(IVisitor<R> visitor, in ReadOnlySpan<char> source)
            {
                return visitor.VisitExpressionStmt(this, source);
            }
        }


        public class Print : Stmt
        {
            public Print( Expr expression )
            {
                this.expression = expression;
            }

            public readonly Expr expression;

            public override R Accept<R>(IVisitor<R> visitor, in ReadOnlySpan<char> source)
            {
                return visitor.VisitPrintStmt(this, source);
            }
        }


        public class Var : Stmt
        {
            public Var( Token name, Expr? initializer )
            {
                this.name = name;
                this.initializer = initializer;
            }

            public readonly Token name;

            public readonly Expr? initializer;

            public override R Accept<R>(IVisitor<R> visitor, in ReadOnlySpan<char> source)
            {
                return visitor.VisitVarStmt(this, source);
            }
        }


        public abstract R Accept<R>(IVisitor<R> visitor, in ReadOnlySpan<char> source);
    }
}
