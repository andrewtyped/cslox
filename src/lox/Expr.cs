/*
** This file is generated by the 'tool' project. Do not modify by hand.
*/

using System;
using System.Collections.Generic;

namespace lox
{
    public abstract class Expr
    {
        public interface IVisitor<R>
        {
            R VisitAssignExpr(Assign expr, in ReadOnlySpan<char> source);
            R VisitBinaryExpr(Binary expr, in ReadOnlySpan<char> source);
            R VisitGroupingExpr(Grouping expr, in ReadOnlySpan<char> source);
            R VisitLiteralExpr(Literal expr, in ReadOnlySpan<char> source);
            R VisitUnaryExpr(Unary expr, in ReadOnlySpan<char> source);
            R VisitVariableExpr(Variable expr, in ReadOnlySpan<char> source);
        }

        public class Assign : Expr
        {
            public Assign( Token name, Expr value )
            {
                this.name = name;
                this.value = value;
            }

            public readonly Token name;

            public readonly Expr value;

            public override R Accept<R>(IVisitor<R> visitor, in ReadOnlySpan<char> source)
            {
                return visitor.VisitAssignExpr(this, source);
            }
        }


        public class Binary : Expr
        {
            public Binary( Expr left, Token op, Expr right )
            {
                this.left = left;
                this.op = op;
                this.right = right;
            }

            public readonly Expr left;

            public readonly Token op;

            public readonly Expr right;

            public override R Accept<R>(IVisitor<R> visitor, in ReadOnlySpan<char> source)
            {
                return visitor.VisitBinaryExpr(this, source);
            }
        }


        public class Grouping : Expr
        {
            public Grouping( Expr expression )
            {
                this.expression = expression;
            }

            public readonly Expr expression;

            public override R Accept<R>(IVisitor<R> visitor, in ReadOnlySpan<char> source)
            {
                return visitor.VisitGroupingExpr(this, source);
            }
        }


        public class Literal : Expr
        {
            public Literal( object? value )
            {
                this.value = value;
            }

            public readonly object? value;

            public override R Accept<R>(IVisitor<R> visitor, in ReadOnlySpan<char> source)
            {
                return visitor.VisitLiteralExpr(this, source);
            }
        }


        public class Unary : Expr
        {
            public Unary( Token op, Expr right )
            {
                this.op = op;
                this.right = right;
            }

            public readonly Token op;

            public readonly Expr right;

            public override R Accept<R>(IVisitor<R> visitor, in ReadOnlySpan<char> source)
            {
                return visitor.VisitUnaryExpr(this, source);
            }
        }


        public class Variable : Expr
        {
            public Variable( Token name )
            {
                this.name = name;
            }

            public readonly Token name;

            public override R Accept<R>(IVisitor<R> visitor, in ReadOnlySpan<char> source)
            {
                return visitor.VisitVariableExpr(this, source);
            }
        }


        public abstract R Accept<R>(IVisitor<R> visitor, in ReadOnlySpan<char> source);
    }
}
