/*=========================================
Grammar for the Lox Programming Language

This file uses the grammar syntax described in the Crafting Interpreters book. The grammar will be
repeated and extended as the book progresses. Grammars from early chapters appear at the end of the file.
The language's final grammar appears first.

A rule is declared with a name, followed by ->, then by the sequence of characters produced by the rule,
then by a terminating ;. The rule's characters may refer to other rules, including itself, or 
a token in the Lox language.

A terminal character is referred to with a token type in ALL CAPS, or a literal string enclosed by "".

A rule may map to one of several sequences. The rule can be re-defined for each sequence, or 
sequences can be separated with |.

Elements of a sequence can be grouped between ( and ).

Append a * to a symbol or group to indicate it may be repeated 0 or more times.

Append a + to a symbol or group to indicate it may be repeated 1 or more times.

Append a ? to a symbol or group to indicate it may appear 0 or 1 times.

Use // for line comments and /* */ for block comments. These are my own additions since the
book doesn't use comments in its grammar snippets.

For example, here is the 'breakfast' grammar used in the book:

breakfast -> protein ( "with" breakfast "on the side" )?
          | bread ;

protein   -> "really"+ "crispy" "bacon"
          | "sausage"
          | ( "scrambled" | "poached" | "fried" ) "eggs" ;

bread     -> "toast" | "biscuits" | "English muffin" ;

=========================================*/

// Section 8.4.1 Assignment syntax
// ===============================

This section adds support for assigning values to variables after
declaration.

program -> (declaration* | expression) EOF ;

declaration -> varDecl
               | statement ;

varDecl -> "var" IDENTIFIER ( "=" expression )? ";";

statement -> exprStmt
             | printStmt ;

exprStmt -> expression ";" ;
printStmt -> "print" expression ";";

expression -> assignment ;
assignment -> IDENTIFIER "=" assignment
              | equality ;
equality -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison -> addition ( ( ">" | ">=" | "<" | "<=" ) addition )* ;
addition -> multiplication ( ( "-" | "+" ) multiplication )* ;
multiplication -> unary ( ( "/" | "*" ) unary )* ;
unary -> ( "!" | "-" ) unary
         | primary ;
primary -> NUMBER | STRING | "false" | "true" | "nil"
           | "(" expression ")" 
           | IDENTIFIER;

// Section 8.5.2 Block syntax and semantics
// ========================================

This section adds support for lexically scoped blocks (statements enclosed by "{" and "}"").

program -> (declaration* | expression) EOF ;

declaration -> varDecl
               | statement ;

varDecl -> "var" IDENTIFIER ( "=" expression )? ";";

statement -> exprStmt
             | printStmt 
             | block;

exprStmt -> expression ";" ;
printStmt -> "print" expression ";";
block -> "{" declaration* "}" ;

expression -> equality;
equality -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison -> addition ( ( ">" | ">=" | "<" | "<=" ) addition )* ;
addition -> multiplication ( ( "-" | "+" ) multiplication )* ;
multiplication -> unary ( ( "/" | "*" ) unary )* ;
unary -> ( "!" | "-" ) unary
         | primary ;
primary -> NUMBER | STRING | "false" | "true" | "nil"
           | "(" expression ")" 
           | IDENTIFIER;


// Section 8.2.1 Variable syntax
// =============================

This section adds support for variables and IDENTIFIER primaries to
the grammar.

program -> (declaration* | expression) EOF ;

declaration -> varDecl
               | statement ;

varDecl -> "var" IDENTIFIER ( "=" expression )? ";";

statement -> exprStmt
             | printStmt ;

exprStmt -> expression ";" ;
printStmt -> "print" expression ";";

expression -> equality;
equality -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison -> addition ( ( ">" | ">=" | "<" | "<=" ) addition )* ;
addition -> multiplication ( ( "-" | "+" ) multiplication )* ;
multiplication -> unary ( ( "/" | "*" ) unary )* ;
unary -> ( "!" | "-" ) unary
         | primary ;
primary -> NUMBER | STRING | "false" | "true" | "nil"
           | "(" expression ")" 
           | IDENTIFIER;

// Section 8.1 Statements
// ======================

This section adds expression and print statements to the grammar
so we can assign variables and write to the console. I've also
added custom support for executing a single expression so that
semicolons aren't required in the REPL.

program -> (statement* | expression) EOF ;

statement -> exprStmt
             | printStmt ;

exprStmt -> expression ";" ;
printStmt -> "print" expression ";";

expression -> equality;
equality -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison -> addition ( ( ">" | ">=" | "<" | "<=" ) addition )* ;
addition -> multiplication ( ( "-" | "+" ) multiplication )* ;
multiplication -> unary ( ( "/" | "*" ) unary )* ;
unary -> ( "!" | "-" ) unary
         | primary ;
primary -> NUMBER | STRING | "false" | "true" | "nil"
           | "(" expression ")" ;


// Section 6.1 Ambiguity and the Parsing Game
// ===========================================

This section adds precedence and associativity rules to the grammar, so that
expressions like 6 / 3 - 1 are evaluated unambiguously.

expression -> equality;
equality -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison -> addition ( ( ">" | ">=" | "<" | "<=" ) addition )* ;
addition -> multiplication ( ( "-" | "+" ) multiplication )* ;
multiplication -> unary ( ( "/" | "*" ) unary )* ;
unary -> ( "!" | "-" ) unary
         | primary ;
primary -> NUMBER | STRING | "false" | "true" | "nil"
           | "(" expression ")" ;


// Section 5.1.3 A Grammar for Lox Expressions
// ===========================================

expression -> literal
              | unary
              | binary
              | grouping;

literal -> NUMBER | STRING | "true" | "false" | "nil" ;
grouping -> "(" expression ")" ;
unary -> ( "-" | "!" ) expression ;
binary -> expression operator expression ;
operator -> "==" | "!=" | "<" | "<=" | ">" | ">="
          | "+"  | "-"" | "*" | "/" ;